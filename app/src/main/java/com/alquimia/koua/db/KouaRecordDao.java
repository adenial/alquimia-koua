package com.alquimia.koua.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alquimia.koua.db.KouaRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KOUA_RECORD".
*/
public class KouaRecordDao extends AbstractDao<KouaRecord, Long> {

    public static final String TABLENAME = "KOUA_RECORD";

    /**
     * Properties of entity KouaRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Operation = new Property(1, String.class, "operation", false, "OPERATION");
        public final static Property OperationType = new Property(2, int.class, "operationType", false, "OPERATION_TYPE");
        public final static Property Amount = new Property(3, Double.class, "amount", false, "AMOUNT");
        public final static Property Authorization = new Property(4, Integer.class, "authorization", false, "AUTHORIZATION");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
    };


    public KouaRecordDao(DaoConfig config) {
        super(config);
    }
    
    public KouaRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KOUA_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OPERATION\" TEXT NOT NULL ," + // 1: operation
                "\"OPERATION_TYPE\" INTEGER NOT NULL ," + // 2: operationType
                "\"AMOUNT\" REAL," + // 3: amount
                "\"AUTHORIZATION\" INTEGER," + // 4: authorization
                "\"MESSAGE\" TEXT," + // 5: message
                "\"DATE\" TEXT);"); // 6: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KOUA_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KouaRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOperation());
        stmt.bindLong(3, entity.getOperationType());
 
        Double amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(4, amount);
        }
 
        Integer authorization = entity.getAuthorization();
        if (authorization != null) {
            stmt.bindLong(5, authorization);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public KouaRecord readEntity(Cursor cursor, int offset) {
        KouaRecord entity = new KouaRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // operation
            cursor.getInt(offset + 2), // operationType
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // authorization
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // message
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KouaRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOperation(cursor.getString(offset + 1));
        entity.setOperationType(cursor.getInt(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setAuthorization(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(KouaRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(KouaRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
